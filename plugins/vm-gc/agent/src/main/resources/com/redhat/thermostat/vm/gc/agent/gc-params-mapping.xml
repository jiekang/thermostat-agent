<?xml version="1.0"?>
<!--

 Copyright 2012-2017 Red Hat, Inc.

 This file is part of Thermostat.

 Thermostat is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation; either version 2, or (at your
 option) any later version.

 Thermostat is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Thermostat; see the file COPYING.  If not see
 <http://www.gnu.org/licenses/>.

 Linking this code with other modules is making a combined work
 based on this code.  Thus, the terms and conditions of the GNU
 General Public License cover the whole combination.

 As a special exception, the copyright holders of this code give
 you permission to link this code with independent modules to
 produce an executable, regardless of the license terms of these
 independent modules, and to copy and distribute the resulting
 executable under terms of your choice, provided that you also
 meet, for each linked independent module, the terms and conditions
 of the license of that module.  An independent module is a module
 which is not derived from or based on this code.  If you modify
 this code, you may extend this exception to your version of the
 library, but you are not obligated to do so.  If you do not wish
 to do so, delete this exception statement from your version.

-->
<gc-params-mapping xmlns="http://icedtea.classpath.org/thermostat/gc-params-mapping/v1.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://icedtea.classpath.org/thermostat/gc-params-mapping/v1.0 gc-params-mapping.xsd">

  <!-- Reference documentation -->
  <!-- http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html -->
  <!-- http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html -->
  <!-- http://www.slideshare.net/SimoneBordet/g1-garbage-collector-details-and-tuning -->
  <!-- http://www.oracle.com/technetwork/articles/java/g1gc-1984535.html -->
  <!-- http://icedtea.classpath.org/hg/icedtea7-forest/hotspot/file/aea5b566bfab/src/share/vm/gc_implementation/g1/g1_globals.hpp -->

  <common>
    <gc-params>
      <gc-param>
        <flag>PrintGC</flag>
        <description>Print messages when garbage collection takes place</description>
      </gc-param>
      <gc-param>
        <flag>PrintGCDetails</flag>
        <description>Print more details in garbage collection messages</description>
      </gc-param>
      <gc-param>
        <flag>PrintGCTimeStamps</flag>
        <description>Print timestamps in garbage collection messages</description>
      </gc-param>
      <gc-param>
        <flag>UseGCLogFileRotation</flag>
        <description>Enable GC log file rotation. Requires -Xloggc:filename, which enables logging GC messages to
          file
        </description>
      </gc-param>
      <gc-param>
        <flag>NumberOfGClogFiles</flag>
        <description>The number of rotating log files to use. Must be greater than or equal to 1. The default is 1.
        </description>
      </gc-param>
      <gc-param>
        <flag>GCLogFileSize</flag>
        <description>The maximum log file size in bytes after which the log files will be rotated. Must be greater
          than or equal to 8K. The default is 8K.
        </description>
      </gc-param>
    </gc-params>
  </common>

  <collector>
    <collector-info>
      <version>[1.4.2.0,]</version>
      <common-name>Serial Collector</common-name>
      <collector-distinct-names>
        <collector-name>MSC</collector-name>
        <collector-name>Copy</collector-name>
      </collector-distinct-names>
      <url>http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#available_collectors</url>
    </collector-info>
    <gc-params>
      <gc-param>
        <flag>UseSerialGC</flag>
        <description>Use serial garbage collection</description>
      </gc-param>
      <gc-param>
        <flag>ScavengeBeforeFullGC</flag>
        <description>Do garbage collection on young generations before performing full GC cycles</description>
      </gc-param>
      <gc-param>
        <flag>UseGCOverheadLimit</flag>
        <description>Limit the proportion of time that the VM will spend in garbage collection before an OutOfMemory
          error is thrown
        </description>
        <version>[1.6.0.0,]</version>
      </gc-param>
      <gc-param>
        <flag>MaxHeapFreeRatio</flag>
        <description>The maximum percentage of heap size free after a garbage collection cycle to avoid heap
          shrinking. The default is 70
        </description>
      </gc-param>
      <gc-param>
        <flag>MinHeapFreeRatio</flag>
        <description>The minimum percentage of heap size free after a garbage collection cycle to avoid heap
          expansion. The default is 40
        </description>
      </gc-param>
      <gc-param>
        <flag>MaxNewSize</flag>
        <description>The maximum size of the new generation, in bytes. Since 1.4, this is computed as a function of
          NewRatio
        </description>
      </gc-param>
      <gc-param>
        <flag>MaxPermSize</flag>
        <description>The maximum size of the permanent generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger
        </description>
        <version>[1.4.2.0,1.8.0.0)</version>
      </gc-param>
      <gc-param>
        <flag>NewRatio</flag>
        <description>Ratio of old and new generation sizes. The default is 2</description>
      </gc-param>
      <gc-param>
        <flag>NewSize</flag>
        <description>The default size of the new generation, in bytes. Since 5.0, 64-bit VMs are scaled 30% larger
        </description>
      </gc-param>
      <gc-param>
        <flag>SurvivorRatio</flag>
        <description>Ratio of eden and survivor space. The default is 8</description>
      </gc-param>
      <gc-param>
        <flag>TargetSurvivorRatio</flag>
        <description>The target percentage of survivor space in use after a scavenge</description>
      </gc-param>
    </gc-params>
  </collector>

  <collector>
    <collector-info>
      <version>[1.6.0.14,]</version>
      <common-name>Garbage-First Collector (G1)</common-name>
      <collector-distinct-names>
        <collector-name>G1 incremental collections</collector-name>
      </collector-distinct-names>
      <url>http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#available_collectors</url>
    </collector-info>
    <gc-params>
      <gc-param>
        <flag>UseG1GC</flag>
        <description>use the G1 Garbage Collector</description>
      </gc-param>
      <gc-param>
        <flag>MaxGCPauseMillis</flag>
        <description>the max GC pause time goal in milliseconds that G1 will attempt to meet. The default is 200
        </description>
      </gc-param>
      <gc-param>
        <flag>InitiatingHeapOccupancyParent</flag>
        <description>percentage of total heap occupancy at which a GC cycle will be triggered. The default is 45
        </description>
      </gc-param>
      <gc-param>
        <flag>GCPauseIntervalMillis</flag>
        <description>the time interval over which GC pauses totaling up to MaxGCPauseMillis may take place</description>
      </gc-param>
      <gc-param>
        <flag>NewRatio</flag>
        <description>ratio of old a new generation sizes. The default is 2</description>
      </gc-param>
      <gc-param>
        <flag>SurvivorRatio</flag>
        <description>Ratio of eden and survivor space. The default is 8</description>
      </gc-param>
      <gc-param>
        <flag>MaxTenuringThreshold</flag>
        <description>Maximum value for threshold of object tenuring. The default is 15</description>
      </gc-param>
      <gc-param>
        <flag>MaxNewSize</flag>
        <description>The maximum size of the new generation, in bytes. Since 1.4, this is computed as a function of
          NewRatio
        </description>
      </gc-param>
      <gc-param>
        <flag>MaxPermSize</flag>
        <description>The maximum size of the permanent generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger
        </description>
        <version>[1.6.0.14,1.8.0.0)</version>
      </gc-param>
      <gc-param>
        <flag>ParallelGCThreads</flag>
        <description>The number of threads to use during the parallel phase of GC</description>
      </gc-param>
      <gc-param>
        <flag>ConcGCThreads</flag>
        <description>The number of concurrent GC threads to use</description>
      </gc-param>
      <gc-param>
        <flag>UseGCOverheadLimit</flag>
        <description>Limit the proportion of time that the VM will spend in garbage collection before an OutOfMemory
          error is thrown
        </description>
      </gc-param>
      <gc-param>
        <flag>ScavengeBeforeFullGC</flag>
        <description>Do garbage collection on young generations before performing full GC cycles</description>
      </gc-param>
      <gc-param>
        <flag>MaxHeapFreeRatio</flag>
        <description>The maximum percentage of heap size free after a garbage collection cycle to avoid heap
          shrinking. The default is 70
        </description>
      </gc-param>
      <gc-param>
        <flag>MinHeapFreeRatio</flag>
        <description>The minimum percentage of heap size free after a garbage collection cycle to avoid heap
          expansion. The default is 40
        </description>
      </gc-param>
      <gc-param>
        <flag>NewSize</flag>
        <description>The default size of the new generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger
        </description>
      </gc-param>
      <gc-param>
        <flag>TargetSurvivorRatio</flag>
        <description>The target percentage of survivor space in use after a scavenge</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcMarkStepDurationMillis</flag>
        <description>The target duration of individual concurrent marking steps</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRSHotCardLimit</flag>
        <description>The threshold that defines a "hot card"</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRSLogCacheSize</flag>
        <description>Log base 2 of the size of concurrent Remembered Set "hot card" cache</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRefinementGreenZone</flag>
        <description>The number of update buffers that are left in the queue by the concurrent processing threads</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRefinementYellowZone</flag>
        <description>Number of enqueued update buffers that will trigger concurrent processing</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRefinementRedZone</flag>
        <description>Number of enqueued update buffers that will trigger concurrent processing
          instead of enqueueing them</description>
      </gc-param>
      <gc-param>
        <flag>G1UseAdaptiveConcRefinement</flag>
        <description>Select green, yellow, and red zone sizes adaptively to meet the pause time requirements</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRefinementServiceIntervalMillis</flag>
        <description>The last concurrent refinement thread wakes up every specified number of milliseconds to do miscellaneous work</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRefinementThreads</flag>
        <description>The number of threads to use for concurrently updating GC remembered sets. If not set then the default is ParallelGCThreads + 1</description>
      </gc-param>
      <gc-param>
        <flag>G1ConcRefinementThresholdStep</flag>
        <description>Each time the remembered set update queue increases by this amount, activate the next refinement thread, if available</description>
      </gc-param>
      <gc-param>
        <flag>G1ConfidencePercent</flag>
        <description>Confidence level for MMU/pause predictions</description>
      </gc-param>
      <gc-param>
        <flag>G1MarkingOverheadPercent</flag>
        <description>Overhead of concurrent marking</description>
      </gc-param>
      <gc-param>
        <flag>G1UseConcMarkReferenceProcessing</flag>
        <description>If true, enable reference discovery during concurrent marking and reference processing at the end
          of remark</description>
      </gc-param>
      <gc-param>
        <flag>G1HeapRegionSize</flag>
        <description>The size of G1 heap subdivisions. Minimum 1Mb, maximum 32Mb</description>
      </gc-param>
      <gc-param>
        <flag>G1HeapWastePercent</flag>
        <description>The maximum threshold of heap space which is permitted to be wasted. GC cycles will not take
          place when the reclaimable space as a percentage is below this threshold. The default is 10 percent</description>
      </gc-param>
      <gc-param>
        <flag>G1MixedGCCountTarget</flag>
        <description>The number of "mixed" garbage collection cycles to perform after a marking cycle. The default is 8</description>
      </gc-param>
      <gc-param>
        <flag>G1MixedGCLiveThresholdPercent</flag>
        <description>The percent of "live" objects in old generation regions under which a mixed GC will be performed.
          The default is 85</description>
      </gc-param>
      <gc-param>
        <flag>G1HeapWastePercent</flag>
        <description>The threshold percentage of wasted heap space. The default is 5</description>
      </gc-param>
      <gc-param>
        <flag>G1RSetRegionEntries</flag>
        <description>The maximum number of regions</description>
      </gc-param>
      <gc-param>
        <flag>G1RSetScanBlockSize</flag>
        <description>Size of a work unit of cards claimed by a worker thread during Remembered Set scanning</description>
      </gc-param>
      <gc-param>
        <flag>G1RSetSparseRegionEntries</flag>
        <description>Maximum number of entries per region in a sparse table</description>
      </gc-param>
      <gc-param>
        <flag>G1RSetUpdatingPauseTimePercent</flag>
        <description>A target percentage of time that is allowed to be spent on processing Remembered Set update buffers during the collection pause</description>
      </gc-param>
      <gc-param>
        <flag>G1RefProcDrainInterval</flag>
        <description>The number of discovered reference objects to process before draining concurrent marking work queues</description>
      </gc-param>
      <gc-param>
        <flag>G1ReservePercent</flag>
        <description>The percentage of amount of heap space reserved to reduce promotion failure. The default is 10</description>
      </gc-param>
      <gc-param>
        <flag>G1SATBBufferEnqueueingThresholdPercent</flag>
        <description>Before enqueueing them, each mutator thread tries to do some
          filtering on the SATB buffers it generates. If post-filtering
          the percentage of retained entries is over this threshold
          the buffer will be enqueued for processing. A value of 0
          specifies that mutator threads should not do such filtering</description>
      </gc-param>
      <gc-param>
        <flag>G1SATBBufferSize</flag>
        <description>Number of entries in a SATB log buffer</description>
      </gc-param>
      <gc-param>
        <flag>G1UpdateBufferSize</flag>
        <description>Size of an update buffer</description>
      </gc-param>
      <gc-param>
        <flag>G1ExpandByPercentOfAvailable</flag>
        <description>When expanding, the percentage of uncommitted space to claim</description>
      </gc-param>
    </gc-params>
  </collector>

  <collector>
    <collector-info>
      <version>[1.4.1.0,]</version>
      <common-name>Parallel Collector</common-name>
      <collector-distinct-names>
        <collector-name>PSParallelCompact</collector-name>
        <collector-name>PSScavenge</collector-name>
      </collector-distinct-names>
      <url>http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#available_collectors</url>
    </collector-info>
    <gc-params>
      <gc-param>
        <flag>UseParallelGC</flag>
        <description>Use parallel garbage collection for the young generation</description>
      </gc-param>
      <gc-param>
        <flag>UseParallelOldGC</flag>
        <description>Use parallel garbage collection for the both the young and old generation (automatically enables UseParallelGC)</description>
        <version>[1.5.0.6,]</version>
      </gc-param>
      <gc-param>
        <flag>UseGCOverheadLimit</flag>
        <description>Limit the proportion of time that the VM will spend in garbage collection before an OutOfMemory
          error is thrown</description>
        <version>[1.6.0.0,]</version>
      </gc-param>
      <gc-param>
        <flag>ScavengeBeforeFullGC</flag>
        <description>Do garbage collection on young generations before performing full GC cycles</description>
      </gc-param>
      <gc-param>
        <flag>MaxHeapFreeRatio</flag>
        <description>The maximum percentage of heap size free after a garbage collection cycle to avoid heap
          shrinking. The default is 70</description>
      </gc-param>
      <gc-param>
        <flag>MinHeapFreeRatio</flag>
        <description>The minimum percentage of heap size free after a garbage collection cycle to avoid heap
          expansion. The default is 40</description>
      </gc-param>
      <gc-param>
        <flag>MaxNewSize</flag>
        <description>The maximum size of the new generation, in bytes. Since 1.4, this is computed as a function of
          NewRatio</description>
      </gc-param>
      <gc-param>
        <flag>MaxPermSize</flag>
        <description>The maximum size of the permanent generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger</description>
        <version>[1.4.1.0,1.8.0.0)</version>
      </gc-param>
      <gc-param>
        <flag>NewRatio</flag>
        <description>ratio of old a new generation sizes. The default is 2</description>
      </gc-param>
      <gc-param>
        <flag>NewSize</flag>
        <description>The default size of the new generation, in bytes. Since 5.0, 64-bit VMs are scaled 30% larger</description>
      </gc-param>
      <gc-param>
        <flag>SurvivorRatio</flag>
        <description>Ratio of eden and survivor space. The default is 8</description>
      </gc-param>
      <gc-param>
        <flag>TargetSurvivorRatio</flag>
        <description>The target percentage of survivor space in use after a scavenge</description>
      </gc-param>
      <gc-param>
        <flag>ParallelGCThreads</flag>
        <description>The number of threads to use during the parallel phase of GC</description>
      </gc-param>
    </gc-params>
  </collector>

  <collector>
    <collector-info>
      <version>[1.4.1.0,]</version>
      <common-name>Concurrent Collector (Concurrent Mark and Sweep)</common-name>
      <collector-distinct-names>
        <collector-name>CMS</collector-name>
        <collector-name>PCopy</collector-name>
      </collector-distinct-names>
      <url>http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#available_collectors</url>
    </collector-info>
    <gc-params>
      <gc-param>
        <flag>UseConcMarkSweepGC</flag>
        <description>Use the Concurrent Mark and Sweep collector for the old generation</description>
      </gc-param>
      <gc-param>
        <flag>UseGCOverheadLimit</flag>
        <description>Limit the proportion of time that the VM will spend in garbage collection before an OutOfMemory
          error is thrown</description>
        <version>[1.6.0.0,]</version>
      </gc-param>
      <gc-param>
        <flag>ScavengeBeforeFullGC</flag>
        <description>Do garbage collection on young generations before performing full GC cycles</description>
      </gc-param>
      <gc-param>
        <flag>MaxHeapFreeRatio</flag>
        <description>The maximum percentage of heap size free after a garbage collection cycle to avoid heap
          shrinking. The default is 70</description>
      </gc-param>
      <gc-param>
        <flag>MinHeapFreeRatio</flag>
        <description>The minimum percentage of heap size free after a garbage collection cycle to avoid heap
          expansion. The default is 40</description>
      </gc-param>
      <gc-param>
        <flag>MaxNewSize</flag>
        <description>The maximum size of the new generation, in bytes. Since 1.4, this is computed as a function of
          NewRatio</description>
      </gc-param>
      <gc-param>
        <flag>MaxPermSize</flag>
        <description>The maximum size of the permanent generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger</description>
        <version>[1.4.1.0,1.8.0.0)</version>
      </gc-param>
      <gc-param>
        <flag>NewRatio</flag>
        <description>ratio of old a new generation sizes. The default is 2</description>
      </gc-param>
      <gc-param>
        <flag>NewSize</flag>
        <description>The default size of the new generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger</description>
      </gc-param>
      <gc-param>
        <flag>SurvivorRatio</flag>
        <description>Ratio of eden and survivor space. The default is 8</description>
      </gc-param>
      <gc-param>
        <flag>TargetSurvivorRatio</flag>
        <description>The target percentage of survivor space in use after a scavenge</description>
      </gc-param>
    </gc-params>
  </collector>

  <collector>
    <collector-info>
      <version>[1.0.0.0,]</version>
      <common-name>Mark Sweep Compact Collector</common-name>
      <collector-distinct-names>
        <collector-name>MSC</collector-name>
        <collector-name>PCopy</collector-name>
      </collector-distinct-names>
      <url>http://www.oracle.com/technetwork/java/javase/gc-tuning-6-140523.html#available_collectors</url>
    </collector-info>
    <gc-params>
      <gc-param>
        <flag>UseGCOverheadLimit</flag>
        <description>Limit the proportion of time that the VM will spend in garbage collection before an OutOfMemory
          error is thrown
        </description>
        <version>[1.6.0.0,]</version>
      </gc-param>
      <gc-param>
        <flag>ScavengeBeforeFullGC</flag>
        <description>Do garbage collection on young generations before performing full GC cycles</description>
        <version>[1.4.1.0,]</version>
      </gc-param>
      <gc-param>
        <flag>MaxHeapFreeRatio</flag>
        <description>The maximum percentage of heap size free after a garbage collection cycle to avoid heap
          shrinking. The default is 70
        </description>
      </gc-param>
      <gc-param>
        <flag>MinHeapFreeRatio</flag>
        <description>The minimum percentage of heap size free after a garbage collection cycle to avoid heap
          expansion. The default is 40
        </description>
      </gc-param>
      <gc-param>
        <flag>MaxNewSize</flag>
        <description>The maximum size of the new generation, in bytes. Since 1.4, this is computed as a function of
          NewRatio
        </description>
      </gc-param>
      <gc-param>
        <flag>MaxPermSize</flag>
        <description>The maximum size of the permanent generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger
        </description>
        <version>[1.0.0.0,1.8.0.0)</version>
      </gc-param>
      <gc-param>
        <flag>NewRatio</flag>
        <description>ratio of old a new generation sizes. The default is 2</description>
      </gc-param>
      <gc-param>
        <flag>NewSize</flag>
        <description>The default size of the new generation, in bytes. Since 5.0, 64-bit VMs are scaled 30%
          larger
        </description>
      </gc-param>
      <gc-param>
        <flag>SurvivorRatio</flag>
        <description>Ratio of eden and survivor space. The default is 8</description>
      </gc-param>
      <gc-param>
        <flag>TargetSurvivorRatio</flag>
        <description>The target percentage of survivor space in use after a scavenge</description>
      </gc-param>
    </gc-params>
  </collector>

  <collector>
    <collector-info>
      <version>[1.8.0.0,]</version>
      <common-name>Shenandoah Collector</common-name>
      <collector-distinct-names>
        <collector-name>Shenandoah concurrent phases</collector-name>
        <collector-name>Shenandoah pauses</collector-name>
        <collector-name>Shenandoah full GC pauses</collector-name>
      </collector-distinct-names>
      <url>http://hg.openjdk.java.net/shenandoah/jdk8u/hotspot/file/c1b5450e17dd/src/share/vm/gc_implementation/shenandoah/shenandoah_globals.hpp</url>
    </collector-info>
    <gc-params>
      <gc-param>
        <flag>UseShenandoahGC</flag>
        <description>Use the Shenandoah garbage collector. Default is false</description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahAllocReserveRegions</flag>
        <description>
          How many regions should be kept as allocation reserve, before
          Shenandoah attempts to grow the heap. Default is 10
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahAllocationThreshold</flag>
        <description>
          Sets the number of bytes allocated since last GC cycle before
          a region can enter the concurrent marking 
          phase. Applies to Shenandoah GC dynamic Heuristic mode only 
          (ignored otherwise)
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahFreeThreshold</flag>
        <description>
          Set the percentage of heap free in relation to the total 
          capacity before a region can enter the concurrent marking 
          phase. Applies to Shenandoah GC dynamic Heuristic mode only 
          (ignored otherwise). Default is 25
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahGCHeuristics</flag>
        <description>
          The heuristics to use in Shenandoah GC; possible values: 
          statusquo, aggressive, halfway, lazy, dynamic. Default is
          dynamic
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahGCVerbose</flag>
        <description>
          Verbose information about the Shenandoah garbage collector.
          Default is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahGarbageThreshold</flag>
        <description>
          Sets the percentage of garbage a region need to contain before 
          it can be marked for collection. Applies to 
          Shenandoah GC dynamic Heuristic mode only (ignored otherwise).
          Default is 60
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahHeapRegionSize</flag>
        <description>
         Size of the Shenandoah regions
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahInitialFreeThreshold</flag>
        <description>
         Set the percentage of heap free in relation to the total 
         capacity before a region can enter the concurrent marking 
         phase. Applies to Shenandoah GC dynamic Heuristic mode only 
         (ignored otherwise). Default is 50
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahLogConfig</flag>
        <description>
          Log information about Shenandoah's configuration settings.
          Default is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahOptimizeFinals</flag>
        <description>Optimize barriers on final and stable fields/arrays.</description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahPrintCollectionSet</flag>
        <description>
          Print the collection set before each GC phase. Default is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahProcessReferences</flag>
        <description>
          Enable processing of (soft/weak/..) references in Shenandoah.
          Default is true
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahReadBarrier</flag>
        <description>
          Turn on/off read barriers in Shenandoah. Default is true
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahReadBarrier</flag>
        <description>
          Turn on/off read barriers in Shenandoah. Default is true
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahTargetHeapOccupancy</flag>
        <description>
          Sets the target maximum percentage occupance of the heap we
          would like to maintain.
          Shenandoah GC newadaptive Heuristic mode only. Default is 80
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahTraceFullGC</flag>
        <description>
          Trace Shenandoah full GC. Defaut is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahTraceHumongous</flag>
        <description>
          Trace Shenandoah humongous objects. Default is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahTracePhases</flag>
        <description>
          Trace Shenandoah GC phases. Default is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahWarnings</flag>
        <description>
          Print Shenandoah related warnings. Useful for Shenandoah developers. Default is false
        </description>
      </gc-param>
      <gc-param>
        <flag>ShenandoahWriteBarrier</flag>
        <description>
          Turn on/off write barriers in Shenandoah. Default is true
        </description>
      </gc-param>
    </gc-params>
  </collector>

</gc-params-mapping>
